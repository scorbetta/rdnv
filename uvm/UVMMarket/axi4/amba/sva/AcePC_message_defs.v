//  ========================================================================--
//  The confidential and proprietary information contained in this file may
//  only be used by a person authorised under and to the extent permitted
//  by a subsisting licensing agreement from ARM Limited.
//  
//                   (C) COPYRIGHT 2011 ARM Limited.
//                           ALL RIGHTS RESERVED
//  
//  This entire notice must be reproduced on all copies of this file
//  and copies of this file may only be made by a person if such person is
//  permitted to do so under the terms of a subsisting license agreement
//  from ARM Limited.
//  
//  ----------------------------------------------------------------------------
//  Version and Release Control Information:
//  
//  File Revision       : 128233
//
//  Date                :  2012-04-02 13:38:49 +0100 (Mon, 02 Apr 2012)
//  
//  Release Information : BP065-BU-01000-r0p1-00rel0
//  
//  ----------------------------------------------------------------------------
//  Purpose             : ACE SV Protocol Assertions message `defines
//  ========================================================================--
`ifndef AXI4PC_MESSAGES
  `include "Axi4PC_ace_message_defs.v"
`endif

`ifndef ACEPC_MESSAGES
  `define ACEPC_MESSAGES
  `define ERRM_AWDOMAIN_STABLE  "ACE_ERRM_AWDOMAIN_STABLE: AWDOMAIN must remain stable when AWVALID is asserted and AWREADY low. Spec: section A3.2.1."
  `define ERRM_AWSNOOP_STABLE   "ACE_ERRM_AWSNOOP_STABLE: AWSNOOP must remain stable when AWVALID is asserted and AWREADY low. Spec: section A3.2.1."
  `define ERRM_AWBAR_STABLE     "ACE_ERRM_AWBAR_STABLE: AWBAR must remain stable when AWVALID is asserted and AWREADY low. Spec: section A3.2.1."
  `define ERRM_ARDOMAIN_STABLE  "ACE_ERRM_ARDOMAIN_STABLE: ARDOMAIN must remain stable when ARVALID is asserted and ARREADY low. Spec: section A3.2.1."
  `define ERRM_ARSNOOP_STABLE   "ACE_ERRM_ARSNOOP_STABLE: ARSNOOP must remain stable when ARVALID is asserted and ARREADY low. Spec: section A3.2.1."
  `define ERRM_ARBAR_STABLE     "ACE_ERRM_ARBAR_STABLE: ARBAR must remain stable when ARVALID is asserted and ARREADY low. Spec: section A3.2.1."
  `define ERRM_AR_BARRIER_ID    "ACE_ERRM_AR_BARRIER_ID: The ID of a read barrier must not be same as any non barrier transaction ID. Spec: section C8.4.1."
  `define ERRM_AW_BARRIER_ID    "ACE_ERRM_AW_BARRIER_ID: The ID of a write barrier must not be same as any non barrier transaction ID. Spec: section C8.4.1."
  `define ERRM_AWCACHE_DEVICE   "ACE_ERRM_AWCACHE_DEVICE: When AWVALID is high and AWCACHE[1] is low (device transactions), then AWDOMAIN must be system shareable (2'b11). Spec: table C3-3."
  `define ERRM_ARCACHE_DEVICE   "ACE_ERRM_ARCACHE_DEVICE: When ARVALID is high and ARCACHE[1] is low (device transactions), then ARDOMAIN must be system shareable (2'b11). Spec: table C3-3."
  `define ERRM_AWCACHE_SYSTEM   "ACE_ERRM_AWCACHE_SYSTEM: When AWVALID is high and AWCACHE[3:2] is not 2'b00, then AWDOMAIN must not be system shareable (2'b11). Spec: table C3-3."
  `define ERRM_ARCACHE_SYSTEM   "ACE_ERRM_ARCACHE_SYSTEM: When ARVALID is high and ARCACHE[3:2] is not 2'b00, then ARDOMAIN must not be system shareable (2'b11). Spec: table C3-3."
  `define ERRM_DVM_CTL          "ACE_ERRM_DVM_CTL: A DVM transaction must specify ARDOMAIN as InnerShareable or OuterShareable, ARBURST = INCR, ARLEN = 0,ARSIZE = data bus width, ARCACHE = 4'b0010, ARLOCK = 1'b0, ARBAR[0] = 1'b0. Spec: table C12-4."
  `define ERRM_DVM_COMPLETE_CTL "ACE_ERRM_DVM_COMPLETE_CTL: A DVM COMPLETE transaction must specify ARADDR as all zero's. Spec: table C12-4."
  `define ERRS_DVM_COMPLETE_CTL "ACE_ERRS_DVM_COMPLETE_CTL: A DVM COMPLETE transaction must specify ACADDR as all zero's. Spec: table C12-4."
  `define ERRM_R_W_BARRIER_CTL  "ACE_ERRM_R_W_BARRIER_CTL: Barrier transactions must be issued in the same order on the Read and Write channels. The ID, DOMAIN and PROT values of corresponding read and write barriers must match. Spec: section C8.4.1."
  `define ERRM_AR_NORMAL_ID     "ACE_ERRM_AR_NORMAL_ID: Normal read transactions must not share IDs with barrier or DVM transactions. Spec: section C8.4.1, C12.3.5."
  `define ERRM_AW_NORMAL_ID     "ACE_ERRM_AW_NORMAL_ID: Normal write transactions must not share IDs with barrier transactions. Spec: section C8.4.1."
  `define ERRM_R_BARRIER_NUM    "ACE_ERRM_R_BARRIER_NUM: A master must not issue more than 256 outstanding barrier transactions. Spec: section C8.4.1."
  `define ERRM_W_BARRIER_NUM    "ACE_ERRM_W_BARRIER_NUM: A master must not issue more than 256 outstanding barrier transactions. Spec: section C8.4.1."
  `define AUX_CACHE_LINE_SIZE   "ACE_AUX_CACHE_LINE_SIZE: Cache line size must be defined as 16,32,64,128,256,512,1024 or 2048 bytes. Spec: section C3.1.4."
  `define AUX_CACHE_DATA_WIDTH32     "ACE_AUX_CACHE_DATA_WIDTH32: For a data width or snoop data width of 32, the minimum cache line size is 16 bytes and the maximum cache line size is 64 bytes. Spec: section C3.1.4."
  `define AUX_CACHE_DATA_WIDTH64     "ACE_AUX_CACHE_DATA_WIDTH64: For a data width or snoop data width of 64, the minimum cache line size is 16 bytes and the maximum cache line size is 128 bytes. Spec: section C3.1.4."
  `define AUX_CACHE_DATA_WIDTH128    "ACE_AUX_CACHE_DATA_WIDTH128: For a data width or snoop data width of 128, the minimum cache line size is 16 bytes and the maximum cache line size is 256 bytes. Spec: section C3.1.4."
  `define AUX_CACHE_DATA_WIDTH256    "ACE_AUX_CACHE_DATA_WIDTH256: For a data width or snoop data width of 256, the minimum cache line size is 32 bytes and the maximum cache line size is 512 bytes. Spec: section C3.1.4."
  `define AUX_CACHE_DATA_WIDTH512    "ACE_AUX_CACHE_DATA_WIDTH512: For a data width or snoop data width of 512, the minimum cache line size is 64 bytes and the maximum cache line size is 1024 bytes. Spec: section C3.1.4."
  `define AUX_CACHE_DATA_WIDTH1024   "ACE_AUX_CACHE_DATA_WIDTH1024: For a data width or snoop data width of 1024, the minimum cache line size is 128 bytes and the maximum cache line size is 2048 bytes. Spec: section C3.1.4."
  `define AUX_CD_DATA_WIDTH     "ACE_AUX_CD_DATA_WIDTH: Parameter CD_DATA_WIDTH must be 32, 64, 128, 256, 512 or 1024. Spec: section C3.8."
  `define RECM_ACREADY_MAX_WAIT "ACE_RECM_ACREADY_MAX_WAIT: ACREADY should be asserted within MAXWAITS cycles of ACVALID being asserted."
  `define RECS_CRREADY_MAX_WAIT "ACE_RECS_CRREADY_MAX_WAIT: CRREADY should be asserted within MAXWAITS cycles of CRVALID being asserted."
  `define RECS_CDREADY_MAX_WAIT "ACE_RECS_CDREADY_MAX_WAIT: CDREADY should be asserted within MAXWAITS cycles of CDVALID being asserted."
  `define AUX_MAXCBURSTS        "ACE_AUX_MAXCBURSTS: Parameter MAXCBURSTS must be greater than or equal to 1."
  `define ERRS_RRESP_IN_SNOOP   "ACE_ERRS_RRESP_IN_SNOOP: If the interconnect sends a snoop transaction to a master, it must not provide the same master with a response to a transaction to the same cache line, until it has received the associated CRRESP response from that master. Spec: section C6.2."
  `define REC_SW_RRESP_IN_SNOOP "ACE_REC_SW_RRESP_IN_SNOOP: At any point in time, different agents should have a consistent view of the shareability of a memory region. A read response to a non-shareable transaction has been sent to the same cache line as an active snoop. Spec: section A4.5."
  `define ERRS_AC_IN_RRESP      "ACE_ERRS_AC_IN_RRESP: If the interconnect provides a master with a response to a transaction, it must not send that master a snoop transaction to the same cache line before it has received the associated RACK or WACK response from that master. Spec: section C6.2."
  `define REC_SW_AC_IN_RRESP    "ACE_REC_SW_AC_IN_RRESP: At any point in time,different agents should have a consistent view of the shareability of a memory region. A snoop has been received to a region that has an outstanding non shareable read. Spec: section A4.5."
  `define ERRS_BRESP_IN_SNOOP   "ACE_ERRS_BRESP_IN_SNOOP: If the interconnect sends a snoop transaction to a master, it must not provide the same master with a response to a WriteUnique or WriteLineUnique transaction to the same cache line, until it has received the associated CRRESP response from that master. Spec: section C6.2."
  `define REC_SW_BRESP_IN_SNOOP "ACE_REC_SW_BRESP_IN_SNOOP: At any point in time, different agents should have a consistent view of the shareability of a memory region. A write response to a non-shareable transaction has been sent to the same cache line as an active snoop. Spec: section A4.5."
  `define ERRS_AC_IN_BRESP      "ACE_ERRS_AC_IN_BRESP: If the interconnect provides a master with a response to a  WriteUnique or WriteLineUnique transaction, it must not send the same master a snoop transaction to the same cache line until it has received an acknowledgement of the transaction response on WACK. Spec: section C6.2."
  `define REC_SW_AC_IN_BRESP    "ACE_REC_SW_AC_IN_BRESP: At any point in time,different agents should have a consistent view of the shareability of a memory region. A snoop has been received to a region that has an outstanding non shareable write. Spec: section A4.5."
  `define ERRM_CRRESP_IN_WB_WC  "ACE_ERRM_CRRESP_IN_WB_WC: If a WriteBack or WriteClean is in progress for a cacheline (from AWVALID to BVALID and BREADY handshake), then any snoops to the same or overlapping address must respond with IsShared = 1 and PassDirty = 0 on CRRESP. Spec: section C5.2.3."
  `define ERRM_AR_IN_CMAINT     "ACE_ERRM_AR_IN_CMAINT: A master must not issue a shareable read transaction to a cache line that has outstanding cache maintenance operation. Spec section C7.2.1."
  `define ERRM_AW_IN_CMAINT     "ACE_ERRM_AW_IN_CMAINT: A master must not issue a shareable write transaction to a cache line that has outstanding cache maintenance operation. Spec section C7.2.1."
  `define ERRM_CMAINT_IN_READ   "ACE_ERRM_CMAINT_IN_READ: Cache maintenance operations cannot be performed if the master has outstanding shareable read transactions to the same cache line. Spec section C7.2.1."
  `define ERRM_CMAINT_IN_WRITE  "ACE_ERRM_CMAINT_IN_WRITE: Cache maintenance operations cannot be performed if the master has outstanding shareable write transactions to the same cache line. Spec section C7.2.1."
  `define ERRM_CRRESP_DVM_ERROR "ACE_ERRM_CRRESP_DVM_ERROR: An ERROR response is not permitted for a DVM Sync, DVM Complete or DVM Hint.  Spec: section C12.3.4, C12.7.6."
  `define ERRM_CRRESP_DVM       "ACE_ERRM_CRRESP_DVM: CRRESP[4:0] must always be 5'b000x0 for a DVM response.  Spec: section C12.3.4."
  `define ERRM_DVM_SYNC         "ACE_ERRM_DVM_SYNC: DVM sync received on the AR channel. Component can only have one outstanding DVM message that requires a completion message. Spec: section C12.2."
  `define ERRS_DVM_COMPLETE     "ACE_ERRS_DVM_COMPLETE: DVM complete message received on the AC channel but there is no outstanding DVM message that requires a completion message. Spec: section C12.1."
  `define ERRM_DVM_COMPLETE     "ACE_ERRM_DVM_COMPLETE: DVM complete message sent on the AR channel but there is no outstanding DVM message that requires a completion message. Spec: section C12.1, C12.3.2."
  `define ERRM_DVM_TYPES        "ACE_ERRM_DVM_TYPES: The DVM message type indicated by ARADDR[14:12] is not supported. Spec: table C12-2."
  `define ERRS_DVM_TYPES        "ACE_ERRS_DVM_TYPES: The DVM message type indicated by ACADDR[14:12] is not supported. Spec: table C12-2."
  `define ERRM_DVM_RESVD_1      "ACE_ERRM_DVM_RESVD_1: ARADDR[4:1] and ARADDR[7]  are reserved and should be zero for a DVM message. Spec: table C12-2."
  `define ERRM_DVM_RESVD_2      "ACE_ERRM_DVM_RESVD_2: The ARADDR[3:0] must be 4'b0000 for DVM messages conveying additional virtual address information. Spec: table C12-3."
  `define ERRM_DVM_RESVD_3      "ACE_ERRM_DVM_RESVD_3: The ARADDR[15] must be high for DVM Sync messages and ARADDR[11:0] must 'b0. Spec table C12-13."
  `define ERRM_DVM_RESVD_4      "ACE_ERRM_DVM_RESVD_4: The ARADDR[15] must be low for DVM messages other than Sync messages. Spec: section C12.7.5, table C12-2."
  `define ERRM_DVM_MULTIPART_ID "ACE_ERRM_DVM_MULTIPART_ID: Each transaction of a multi-part DVM message must use the same AXI ID. Spec: section C12.3.3."
  `define ERRM_DVM_MULTIPART_SUCCESSIVE "ACE_ERRM_DVM_MULTIPART_SUCCESSIVE: Multi-part DVM messages are always sent as successive transactions and no other transaction can be interposed between them. Spec: section C12.3.3."
  `define ERRS_DVM_MULTIPART_SUCCESSIVE "ACE_ERRS_DVM_MULTIPART_SUCCESSIVE: Multi-part DVM messages are always sent as successive transactions and no other transaction can be interposed between them. Spec: section C12.3.3."
  `define ERRM_DVM_ID           "ACE_ERRM_DVM_ID: A new DVM transaction must not have the same ID as an outstanding normal or Barrier transaction. Spec: section C12.3.5."
  `define ERRS_DVM_RESVD_1      "ACE_ERRS_DVM_RESVD_1: ACADDR[4:1] and ACADDR[7] are reserved and should be zero for a DVM message. Spec: table C12-2."
  `define ERRS_DVM_RESVD_2      "ACE_ERRS_DVM_RESVD_2: The ACADDR[3:0] are reserved and must be zero for DVM messages conveying additional virtual address information. Spec: table C12-3."
  `define ERRS_DVM_RESVD_3      "ACE_ERRS_DVM_RESVD_3: The ACADDR[15] must be high for DVM Sync messages and ACADDR[11:0] must 'b0. Spec table C12-13."
  `define ERRS_DVM_RESVD_4      "ACE_ERRS_DVM_RESVD_4: The ACADDR[15] must be low for DVM messages other than Sync messages. (Spec: section C12.7.5, table C12-2."
  `define ERRM_DVM_TLB_INV      "ACE_ERRM_DVM_TLB_INV: The TLB Invalidate message indicated by ARADDR is not supported. Spec: table C12-6."
  `define ERRS_DVM_TLB_INV      "ACE_ERRS_DVM_TLB_INV: The TLB Invalidate message indicated by ACADDR is not supported. Spec: table C12-6."
  `define ERRM_DVM_BP_INV       "ACE_ERRM_DVM_BP_INV: The Branch Predictor Invalidate message indicated by ARADDR is not supported. Spec: table C12-8."
  `define ERRS_DVM_BP_INV       "ACE_ERRS_DVM_BP_INV: The Branch Predictor Invalidate message indicated by ACADDR is not supported. Spec: table C12-8."
  `define ERRM_DVM_PHY_INV      "ACE_ERRM_DVM_PHY_INV: The Physical Instruction Cache Invalidate message indicated by ARADDR is not supported. Spec: table C12-10."
  `define ERRS_DVM_PHY_INV      "ACE_ERRS_DVM_PHY_INV: The Physical Instruction Cache Invalidate message indicated by ACADDR is not supported. Spec: table C12-10."
  `define ERRM_DVM_VIR_INV      "ACE_ERRM_DVM_VIR_INV: The Virtual Instruction Cache Invalidate message indicated by ARADDR is not supported. Spec: table C12-12."
  `define ERRS_DVM_VIR_INV      "ACE_ERRS_DVM_VIR_INV: The Virtual Instruction Cache Invalidate message indicated by ACADDR is not supported. Spec: table C12-12."
  `define ERRS_DVM_MULTIPART_RRESP "ACE_ERRS_DVM_MULTIPART_RRESP: It is required that the response given to all parts of a multiple transaction message are the same. Spec: section C12.3.4."
  `define ERRM_DVM_MULTIPART_CRRESP "ACE_ERRM_DVM_MULTIPART_CRRESP: It is required that the response given to all parts of a multiple transaction message are the same. Spec: section C12.3.4."
  `define ERRS_RRESP_DVM_ERROR  "ACE_ERRS_RRESP_DVM_ERROR: An ERROR response is not permitted for a DVM Sync, DVM Complete or DVM Hint. Spec: section C12.3.4, C12.7.6."
  `define ERRS_RRESP_DVM        "ACE_ERRS_RRESP_DVM: RRESP[3:2] must always be 'b00 and RRESP[0] must be 'b0 for a DVM response.  Spec: section C12.3.4."
  `define ERRM_AWSNOOP          "ACE_ERRM_AWSNOOP: When AWVALID is high AWSNOOP must be legal. Spec: table C3-7."
  `define ERRM_AW_BLOCK_1       "ACE_ERRM_AW_BLOCK_1: A WriteBack/WriteClean must not be presented on the AW channel whilst a WriteUnique or WriteLineUnique is in progress (AW to B). Spec: section C4.8.6."
  `define ERRM_AW_BLOCK_2       "ACE_ERRM_AW_BLOCK_2: A WriteUnique or WriteLineUnique must not be presented on the AW channel whilst a WriteBack/WriteClean  is in progress (AW to B). Spec: section C4.8.6."
  `define ERRM_AW_FULL_LINE     "ACE_ERRM_AW_FULL_LINE: WriteLineUnique, and Evict transactions are required to be a full cache line size. Spec: section C3.1.5, C6.7.2."
  `define ERRM_AW_SHAREABLE_ALIGN_INCR "ACE_ERRM_AW_SHAREABLE_ALIGN_INCR: WriteLineUnique and Evict transactions with AWBURST = INCR must be aligned to the cache line size. Spec: section C3.1.5, table C3-10."
  `define ERRM_AW_SHAREABLE_ALIGN_WRAP "ACE_ERRM_AW_SHAREABLE_ALIGN_WRAP: WriteLineUnique and Evict transactions with AWBURST = WRAP must be aligned to the data width of the bus. Spec: section C3.1.5, table C3-10."
  `define ERRM_AW_SHAREABLE_LOCK "ACE_ERRM_AW_SHAREABLE_LOCK: All shareable writes as indicated by AWDOMAIN as inner or outer shareable must have AWLOCK = 1'b0. Spec: table C3-10, C3-11, C3-12."
  `define ERRM_AW_SHAREABLE_CTL  "ACE_ERRM_AW_SHAREABLE_CTL: WriteUnique, WriteLineUnique, WriteClean, WriteBack and Evict transactions must not be of type FIXED are required to have AWCACHE[1] asserted, AWLOCK = 1'b0 and AWBAR[0] = 1'b0. Spec: table C3-10, C3-11, C3-12."
  `define ERRM_AW_DOMAIN_1       "ACE_ERRM_AW_DOMAIN_1: WriteClean,WriteBack transactions must not be system shareable. Spec: table C3-8, C3-12."
  `define ERRM_AW_DOMAIN_2       "ACE_ERRM_AW_DOMAIN_2: WriteLineUnique and Evict transactions must be to the inner or outer shareable domains. Spec: table C3-8."
  `define ERRM_WB_WC_CACHE_LINE_BOUNDARY_INCR "ACE_ERRM_WB_WC_CACHE_LINE_BOUNDARY_INCR: WriteClean,WriteBack transactions must not cross a cache line boundary. Spec: table C3-12."
  `define ERRM_WB_WC_CACHE_LINE_BOUNDARY_WRAP "ACE_ERRM_WB_WC_CACHE_LINE_BOUNDARY_WRAP: WriteClean,WriteBack transactions must not cross a cache line boundary. Spec: table C3-12."
  `define RECM_W_R_HAZARD        "ACE_RECM_W_R_HAZARD: A master should not issue a write transaction to a memory region it is currently reading from."
  `define RECM_W_W_HAZARD        "ACE_RECM_W_W_HAZARD: A master should not issue a write transaction to a memory region it is currently writing to."
  `define ERRM_AWDOMAIN_X        "ACE_ERRM_AWDOMAIN_X: When AWVALID is high, a value of X on AWDOMAIN is not permitted. Spec: section A3.2.2."
  `define ERRM_AWBAR_X           "ACE_ERRM_AWBAR_X: When AWVALID is high, a value of X on AWBAR is not permitted. Spec: section A3.2.2."
  `define ERRM_AWSNOOP_X         "ACE_ERRM_AWSNOOP_X: When AWVALID is high, a value of X on AWSNOOP is not permitted. Spec: section A3.2.2."
  `define ERRM_WLU_STRB          "ACE_ERRM_WLU_STRB: WriteLineUnique transactions are not permitted to have sparse strobes.  Spec: section C3.1.5."
  `define ERRS_BRESP_WNS_EXOKAY  "ACE_ERRS_BRESP_WNS_EXOKAY: An EXOKAY response is only allowed for a WriteNoSnoop. Spec: section C3.4."
  `define ERRS_BRESP_BAR         "ACE_ERRS_BRESP_BAR: BRESP must always be 2'b00 for a barrier response. Spec: table C8-2."
  `define ERRS_BRESP_AW_WLAST    "ACE_ERRS_BRESP_AW_WLAST: BVALID must only be asserted after AW handshake and WLAST. Spec: section A3.3.1 and figure A3-7."
  `define ERRM_WACK_X            "ACE_ERRM_WACK_X: When not in reset, a value of X on WACK is not permitted.Spec: section C3.5."         
  `define ERRM_ARSNOOP           "ACE_ERRM_ARSNOOP: When ARVALID is high ARSNOOP must be legal. Spec: table C3-7."
  `define ERRM_AR_FULL_LINE      "ACE_ERRM_AR_FULL_LINE: All shareble reads which have a non-zero ARSNOOP must be cache line size. Spec: section C3.1.5."
  `define ERRM_AR_SHAREABLE_LOCK "ACE_ERRM_AR_SHAREABLE_LOCK: ReadNotSharedDirty, ReadUnique, CleanInvalid, CleanShared, MakeUnique and MakeInvalid must have ARLOCK = 1'b0.   Spec: table C3-10."
  `define ERRM_AR_SHAREABLE_CTL  "ACE_ERRM_AR_SHAREABLE_CTL: ReadClean,ReadNotSharedDirty, ReadShared, ReadUnique, CleanUnique, MakeUnique, CleanShared, CleanInvalid, MakeInvalid transactions must not be of type FIXED and must have ARBAR[0] = 1'b0 and must have ARCACHE[1] asserted. Spec: table C3-10."
  `define ERRM_AR_DOMAIN_2       "ACE_ERRM_AR_DOMAIN_2: ReadShared,ReadClean,ReadNotSharedDirty,ReadUnique,CleanUnique,MakeUnique transactions must be to the inner or outer domains. Spec: table C3-10."
  `define ERRM_AR_DOMAIN_1       "ACE_ERRM_AR_DOMAIN_1: CleanShared, CleanInvalid, MakeInvalid transactions must be to the inner, outer or non shareable domains. Spec: table C3-10."
  `define ERRM_AR_SHAREABLE_ALIGN_INCR "ACE_ERRM_AR_SHAREABLE_ALIGN_INCR: ReadShared,ReadClean,ReadNotSharedDirty,ReadUnique,CleanShared,CleanInvalid,CleanUnique,MakeUnique,MakeInvalid transactions with AWBURST = INCR must be aligned to the cache line size. Spec: section C3.1.5, table C3-10."
  `define RECM_R_W_HAZARD       "ACE_RECM_R_W_HAZARD: A master should not issue a read transaction to a memory region it is currently writing to."
  `define ERRM_ARDOMAIN_X       "ACE_ERRM_ARDOMAIN_X: When ARVALID is high, a value of X on ARDOMAIN is not permitted. Spec: section A3.2.2."
  `define ERRM_ARBAR_X          "ACE_ERRM_ARBAR_X: When ARVALID is high, a value of X on ARBAR is not permitted. Spec: section A3.2.2."
  `define ERRM_ARSNOOP_X        "ACE_ERRM_ARSNOOP_X: When ARVALID is high, a value of X on ARSNOOP is not permitted. Spec: section A3.2.2."
  `define ERRS_RRESP_SHARED     "ACE_ERRS_RRESP_SHARED: RRESP[3:2] must not be SHARED in response to a transaction which requested a unique copy of the data. Spec: section C3.2.1."
  `define ERRS_RRESP_DIRTY      "ACE_ERRS_RRESP_DIRTY: RRESP[3:2] must only be DIRTY in response to a transaction which allows a dirty response. Spec: section C3.2.1."
  `define ERRS_RRESP_RNSD       "ACE_ERRS_RRESP_RNSD: RRESP[3:2] must not  be SHAREDDIRTY in response to a ReadNotSharedDirty transaction. Spec: section C3.2.1."
  `define ERRS_RRESP_ACE_EXOKAY "ACE_ERRS_RRESP_ACE_EXOKAY: An EXOKAY response is only allowed for ReadNoSnoop, ReadClean, ReadShared and CleanUnique transactions. Spec: section C3.2.1."
  `define ERRS_RRESP_BAR        "ACE_ERRS_RRESP_BAR: RRESP must always be 4'b0000 for a barrier response. Spec: table C8-2."
  `define ERRS_DVM_LAST         "ACE_ERRS_DVM_LAST: RLAST must always be asserted for a DVM response."
  `define ERRS_R_BARRIER_LAST   "ACE_ERRS_R_BARRIER_LAST: RLAST must always be asserted for a barrier response. Spec: table C8-2."
  `define ERRS_RDATALESS        "ACE_ERRS_RDATALESS: There must be only one data beat for Clean or Make transactions. Spec: section C3.2.1."
  `define ERRS_RRESP_CONST      "ACE_ERRS_RRESP_CONST: RRESP[3:2] must be constant for every beat of transaction.  Spec: section C3.2.1."
  `define ERRM_RACK_X           "ACE_ERRM_RACK_X: When not in reset, a value of X on RACK is not permitted. Spec: section C3.3."
  `define ERRS_AC_ALIGN         "ACE_ERRS_AC_ALIGN: All snoops have wrapping addresses so when ACVALID is high, ACADDR must be aligned. Spec: section C3.6.2."
  `define ERRS_ACSNOOP          "ACE_ERRS_ACSNOOP: When ACVALID is high, ACSNOOP must be set to a legal value. Spec: table C3-19."
  `define ERRS_ACVALID_RESET    "ACE_ERRS_ACVALID_RESET: ACVALID must be low in the cycle when ARESETn first goes high. Spec: section C2.3.3."
  `define ERRS_ACVALID_STABLE   "ACE_ERRS_ACVALID_STABLE: Once ACVALID is asserted, it must remain asserted until ACREADY is high. Spec: section C3.6.2."
  `define ERRS_ACADDR_STABLE    "ACE_ERRS_ACADDR_STABLE: ACADDR must remain stable when ACVALID is asserted and ACREADY low. Spec: section C3.6.2."
  `define ERRS_ACSNOOP_STABLE   "ACE_ERRS_ACSNOOP_STABLE: ACSNOOP must remain stable when ACVALID is asserted and ACREADY low. Spec: section C3.6.2."
  `define ERRS_ACPROT_STABLE    "ACE_ERRS_ACPROT_STABLE: ACPROT must remain stable when ACVALID is asserted and ACREADY low. Spec: section C3.6.2."
  `define ERRS_ACVALID_X        "ACE_ERRS_ACVALID_X: A value of X on ACVALID is not permitted. Spec: section C2.3.3."
  `define ERRM_ACREADY_X        "ACE_ERRM_ACREADY_X: A value of X on ACREADY is not permitted. Spec: section C2.3.3."
  `define ERRS_ACADDR_X         "ACE_ERRS_ACADDR_X: When ACVALID is high, a value of X on ACADDR is not permitted. Spec: section C3.6.2."
  `define ERRS_ACPROT_X         "ACE_ERRS_ACPROT_X: When ACVALID is high, a value of X on ACPROT is not permitted. Spec: section C3.6.2."
  `define ERRS_ACSNOOP_X        "ACE_ERRS_ACSNOOP_X: When ACVALID is high, a value of X on ACSNOOP is not permitted. Spec: section C3.6.2."
  `define ERRM_CR_ORDER         "ACE_ERRM_CR_ORDER: CRVALID must not be asserted before the corresponding AC handshake occurs. Spec: section C3.9, figure C3-1."
  `define ERRM_CRRESP_DIRTY     "ACE_ERRM_CRRESP_DIRTY: When CRVALID is asserted and CRRESP[2] (PassDirty) is asserted then CRRESP[0] (DataTransfer) must be asserted. Spec: table C3-22."
  `define ERRM_CRRESP_SHARED    "ACE_ERRM_CRRESP_SHARED: When CRVALID is asserted for the response to a ReadUnique, CleanInvalid or MakeInvalid: CRRESP[3] (IsShared) must be low. Spec: section C3.7."
  `define ERRM_CRVALID_RESET    "ACE_ERRM_CRVALID_RESET: CRVALID must be low in the cycle when ARESETn first goes high. Spec: section C2.3.3."
  `define ERRM_CRVALID_STABLE   "ACE_ERRM_CRVALID_STABLE: Once CRVALID is asserted, it must remain asserted until CRREADY is high. Spec: section C3.7."
  `define ERRM_CRRESP_STABLE    "ACE_ERRM_CRRESP_STABLE: CRRESP must remain stable when CRVALID is asserted and CRREADY low. Spec: section C3.7."
  `define ERRM_CRVALID_X        "ACE_ERRM_CRVALID_X: A value of X on CRVALID is not permitted. Spec: section C2.3.3."
  `define ERRS_CRREADY_X        "ACE_ERRS_CRREADY_X: A value of X on CRREADY is not permitted. Spec: section C2.3.3."
  `define ERRM_CRRESP_X         "ACE_ERRM_CRRESP_X: When CRVALID is high, a value of X on CRRESP is not permitted. Spec: section C3.7."
  `define ERRM_CDDATA_NUM       "ACE_ERRM_CDDATA_NUM: Each snoop that responds with DataTransfer asserted must correspond to a full cache line transfer. CDLAST must only be asserted during the final beat of snoop data response.  Spec: section C3.7, C3.8."
  `define ERRM_CD_ORDER         "ACE_ERRM_CD_ORDER: CDVALID must not be asserted before the corresponding AC handshake occurs. Spec: section C3.9, figure C3-1."
  `define ERRM_CDVALID_RESET    "ACE_ERRM_CDVALID_RESET: CDVALID must be low in the cycle when ARESETn first goes high. Spec: section C2.3.3."
  `define ERRM_CDVALID_STABLE   "ACE_ERRM_CDVALID_STABLE: Once CDVALID is asserted, it must remain asserted until CDREADY is high. Spec: section C3.8."
  `define ERRM_CDDATA_STABLE    "ACE_ERRM_CDDATA_STABLE: CDDATA must remain stable when CDVALID is asserted and CDREADY low. Spec: section C3.8."
  `define ERRM_CDLAST_STABLE    "ACE_ERRM_CDLAST_STABLE: CDLAST must remain stable when CDVALID is asserted and CDREADY low. Spec: section C3.8."
  `define ERRM_CDVALID_X        "ACE_ERRM_CDVALID_X: A value of X on CDVALID is not permitted. Spec: section C2.3.3."
  `define ERRS_CDREADY_X        "ACE_ERRS_CDREADY_X: A value of X on CDREADY is not permitted. Spec: section C2.3.3."
  `define ERRM_CDLAST_X         "ACE_ERRM_CDLAST_X: When CDVALID is high, a value of X on CDLAST is not permitted. Spec: section C3.8."
  `define ERRM_CDDATA_X         "ACE_ERRM_CDDATA_X: When CDVALID is high, a value of X on CDDATA is not permitted. Spec: section C3.8."
  `define AUX_ACCAM_OVERFLOW    "ACE_AUX_ACCAM_OVERFLOW: Snoop CAM Overflow, increase MAXCBURSTS parameter."
  `define AUX_ACCAM_UNDERFLOW   "ACE_AUX_ACCAM_UNDERFLOW: Snoop CAM Underflow. Snoop transaction tracking has failed."
  `define ERRM_RACK             "ACE_ERRM_RACK: RACK must not be asserted until after the corresponding RLAST handshake. Spec: section C3.3."
  `define AUX_ARCAM_OVERFLOW    "ACE_AUX_ARCAM_OVERFLOW: There are too many outstanding read transactions.  A transaction is outstanding from ARVALID until RACK.  Increase MAXRBURSTS."
  `define AUX_ARCAM_UNDERFLOW   "ACE_AUX_ARCAM_UNDERFLOW: Read CAM underflow. Read transaction tracking has failed."
  `define ERRM_AR_BARRIER_CTL   "ACE_ERRM_AR_BARRIER_CTL: Read barriers must have ARLEN = 8'b0, ARBURST = INCR, ARSIZE = Data bus width, ARSNOOP = 4'b0, ARCACHE = 4'b0010 and ARLOCK = 1'b0. Spec: table C3-13."
  `define ERRM_AW_BARRIER_CTL   "ACE_ERRM_AW_BARRIER_CTL: Write barriers must have AWLEN = 8'b0, AWBURST = INCR, AWSIZE = Data bus width, AWSNOOP = 4'b0, AWCACHE = 4'b0010 and AWLOCK = 1'b0. Spec: table C3-13."
  `define ERRM_WACK             "ACE_ERRM_WACK: WACK must not be asserted until after the corresponding B handshake. Spec: section C3.5."
  `define AUX_AWCAM_OVERFLOW    "ACE_AUX_AWCAM_OVERFLOW: There are too many outstanding write transactions.  A transaction is outstanding from AWVALID until WACK.  Increase MAXWBURSTS."
  `define AUX_AWCAM_UNDERFLOW   "ACE_AUX_AWCAM_UNDERFLOW: Write CAM underflow. Write transaction tracking has failed."
  `define ERRM_R_W_BARRIER_EOS  "ACE_ERRM_R_W_BARRIER_EOS: A master must issue barriers on both the read and write channels. There is an outstanding barrier at the end of the simulation."
  `define ERRM_RACK_EOS         "ACE_ERRM_RACK_EOS: A master must complete all transactions with the RACK signal. There is an outstanding RACK at the end of the simulation. Spec: section C3.3."
  `define ERRM_WACK_EOS         "ACE_ERRM_WACK_EOS: A master must complete all transactions with the WACK signal. There is an outstanding WACK at the end of the simulation. Spec: section C3.5."
  `define ERRM_AC_EOS           "ACE_ERRM_AC_EOS: A master must complete all snoop transactions. There is an outstanding snoop transaction at the end of the simulation."
  `define ERR_W_EOS             "ACE_ERR_W_EOS: There is an outstanding write transaction at the end of the simulation."
  `define ERRM_ARSNOOP_LITE     "ACELITE_ERRM_ARSNOOP: When ARVALID is high ARSNOOP must be legal. Spec: table C11-1."
  `define ERRM_AWSNOOP_LITE     "ACELITE_ERRM_AWSNOOP: When AWVALID is high AWSNOOP must be legal. Spec: table C11-2."
  `define ERRM_XSTORE_IN_XSEQ   "ACE_ERRM_XSTORE_IN_XSEQ: A single Exclusive-capable thread must not have an Exclusive Store transaction in progress at the same time as any transaction that registers that a master is performing an Exclusive sequence.Spec: section C9.6." 
  `define AUX_MAX_BARRIERS_LITE "ACELITE_AUX_MAX_BARRIERS: The MAX_BARRIERS parameter for the ACELite protocol checker must be greater than or equal to 1."

`endif

// --========================= End ===========================================--
