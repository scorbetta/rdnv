// Register map definition for the DT5771 design

`include "common.rdl"
`include "dt5771_regs.rdl"

// Utility to instantiate general-purpose registers with name and description
`define GP_CREG(reg_name, reg_desc) \
    CSR_C_GPREG reg_name; \
    reg_name->desc = reg_desc;

`define GP_SREG(reg_name, reg_desc) \
    CSR_S_GPREG reg_name; \
    reg_name->desc = reg_desc;

addrmap dt5771_address_map {
    desc = "The CSR block address map for the DT5771 project";

    // Defaults
    default regwidth = 32;
    default shared = true;

    // Status registers
    `REF_SREG(DDR_CTRL_CONFIG) DDR_CTRL_CONFIG;
    `GP_SREG(RING_BUFFER_WPTR, "The current DDR Write pointer")
    `REF_SREG(PRE_TRIGGER_BUFFER_STATUS) PRE_TRIGGER_BUFFER_STATUS;
    `REF_SREG(PIPE_FIFO_FILL_STATS) PIPE_FIFO_FILL_STATS;
    `GP_SREG(EOS_IRQ_COUNTER, "Number of edges over EOS signal")
    `GP_SREG(EOB_IRQ_COUNTER, "Number of edges over EOB signal")
    `REF_SREG(PIPE_FIFO_STATUS) PIPE_FIFO_STATUS;
    `GP_SREG(RING_BUFFER_WRITE_OFFSET, "The current Write offset")
    `GP_SREG(PRE_TRIGGER_WRITE_OVERFLOW_COUNTER, "Number of Write overflow pulses")
    `GP_SREG(AD9642_RDATA, "AD9642 readout data")
    `GP_SREG(LMH6518_RDATA, "LMH6518 readout data")

    // Control registers
    `GP_CREG(DMA_BUFFER_BASE_ADDR, "The base address of the reserved DMA space in DDR")
    `GP_CREG(DMA_BUFFER_LEN, "The maximum number of DMA chunks available in the DDR ring buffer")
    `GP_CREG(DMA_BUFFER_ADDR_MASK, "The mask is computed from DDR ring buffer specs")
    `REF_CREG(RING_BUFFER_CFG) RING_BUFFER_CFG;
    `REF_CREG(RING_BUFFER_STREAM_CONFIG) RING_BUFFER_STREAM_CONFIG;
    `REF_CREG(DATAGEN_CONFIG) DATAGEN_CONFIG;
    `REF_CREG(FAN_CONTROLLER_CONFIG) FAN_CONTROLLER_CONFIG;
    `REF_CREG(BOARD_MANAGER_CONFIG) BOARD_MANAGER_CONFIG;
    `REF_CREG(ADC_SPI_CONFIG) AD9642_CFG;
    `GP_CREG(AD9642_WDATA, "AD9642 Write data")
    `REF_CREG(ADC_SPI_CONFIG) LMH6518_CFG;
    `GP_CREG(LMH6518_WDATA, "LMH6518 Write data")
    `GP_CREG(DMA_TRIGGER, "DMA readout trigger status (SciCompiler)")
};
