// Definition of registers for the DT5771 design

`include "common.rdl"

// General purpose CSR regs. Properties shall be updated after register has been created, using
// pointer-like syntax. These definitions can be used in all those cases when a single-field
// register is expected, so that we do not have to add multiple unneeded defines
`DEF_CREG(GPREG)
    desc = "General purpose control register";
    field { } data [32] = 0;
};

`DEF_SREG(GPREG)
    desc = "General purpose status register";
    field { } data [32] = 0;
};

// Multi-fields registers
`DEF_SREG(DDR_CTRL_CONFIG)
    desc = "The configuration of the DDR controller";

    field {
        desc = "Address width of the DDR controller AXI interface";
    } axi_addr_width [9] = 0;

    field {
        desc = "Data width of the DDR controller AXI interface";
    } axi_data_width [12] = 0;

    field {
        desc = "Number of beats of the AXI transfer toward DDR";
    } drain_burst_len [11] = 0;
};

`DEF_CREG(RING_BUFFER_CFG)
    desc = "Ring buffer configuration";

    field {
        desc = "Software-initiated trigger";
    } trigger [1] = 0;

    field {
        desc = "Clear IRQ lines";
    } clear_irq [1] = 0;

    field {
        desc = "Mode selector: 2'b00 or 2'b11 for trigger from watermark, 2'b01 for register trigger
        and 2'b10 for external trigger (default: 2'b00)";
    } mode_selector [2] = 2'b00;

    field {
        desc = "Unused";
    } rsv [28] = 0;
};

`DEF_SREG(PRE_TRIGGER_BUFFER_STATUS)
    desc = "Status of the pre-trigger buffer";
    
    field {
        desc = "Number of elements in the buffer";
    } data_count [11];
    
    field {
        desc = "Full flag";
    } full [1];
    
    field {
        desc = "Programmable full flag";
    } pfull [1];
    
    field {
        desc = "Empty flag";
    } empty [1];
    
    field {
        desc = "Programmable empty flag";
    } pempty [1];
    
    field {
        desc = "Unused";
    } rsv [17];
};

`DEF_CREG(RING_BUFFER_STREAM_CONFIG)
    desc = "Configuration of the pre-trigger and post-trigger stream length";
    
    field {
        desc = "Enable input stream";
    } in_stream_en [1] = 0;
    
    field {
        desc = "Software-initiated reset";
    } soft_rstn [1] = 1;
    
    field {
        desc = "Number of pre-trigger samples";
    } pre_trigger_len [10] = 256;
    
    field {
        desc = "Number of post-trigger samples";
    } post_trigger_len [20] = 1024;
};

`DEF_SREG(PIPE_FIFO_FILL_STATS)
    desc = "Filling statistics of the FIFOs lying on the main pipeline";
    
    field {
        desc = "Full event seen on the ring buffer input FIFO";
    } ring_buffer_ififo_full_seen [1] = 0;
    
    field {
        desc = "Maximum number of samples in the ring buffer input FIFO";
    } ring_buffer_ififo_max_fill [10] = 0;

    field {
        desc = "Full event seen on the pre-trigger buffer";
    } pre_trigger_buffer_full_seen [1] = 0;
    
    field {
        desc = "Maximum number of samples in the pre-trigger buffer";
    } pre_trigger_buffer_max_fill [11] = 0;
    
    field {
        desc = "Unused";
    } rsv [9] = 0;
};

`DEF_CREG(DATAGEN_CONFIG)
    desc = "Configuration of the data generation engine";

    field {
        desc = "Data generation enable";
    } datagen_en [1] = 0;

    field {
        desc = "Data generation engine selector";
    } datagen_sel [2] = 0;

    field {
        desc = "Unused";
    } rsv [29] = 0;
};

`DEF_SREG(PIPE_FIFO_STATUS)
    desc = "Snapshot of status of FIFOS lying on the main pipeline";
    
    field {
        desc = "Number of elements in the pre-trigger buffer";
    } pre_trigger_buffer_occupancy [16] = 0;

    field {
        desc = "Number of elements in the ring buffer input FIFO";
    } ring_buffer_ififo_occupancy [16] = 0;
};

`DEF_CREG(FAN_CONTROLLER_CONFIG)
    desc = "Fan controller engine configuration";
    
    field {
        desc = "Fan tick";
    } fan_tick [1] = 0;
    
    field {
        desc = "Unused";
    } rsv [31] = 0;
};

`DEF_CREG(BOARD_MANAGER_CONFIG)
    desc = "Board manager configuration";
    
    field {
        desc = "Joystick switch";
    } jswitch [3];
    
    field {
        desc = "Internal killin, active low";
    } intkilln [1];
    
    field {
        desc = "Recovery";
    } recovery [1];
        
    field {
        desc = "Unused";
    } rsv [27];
};

`DEF_CREG(ADC_SPI_CONFIG)
    desc = "ADC configuration and readout via dedicated SPI interface";
    
    field {
        desc = "Command type: 1'b1 for Read and 1'b0 for Write";
    } CMD_RNW [1];

    field {
        desc = "Number of data beats minus one";
    } CMD_LEN [2];

    field {
        desc = "Address";
    } CMD_ADDR [13];

    field {
        desc = "Enable";
    } ENABLE [1];

    field {
        desc = "Unused";
    } RSV [15];
};
