// Definition of registers for the EXAMPLE design

`include "common.rdl"

`DEF_SREG(VFIFO_STATUS)
    desc = "Status of the VFIFO design";

    field {
        desc = "When 1, the virtual FIFO is empty";
    } empty = 1;

    field {
        desc = "Number of occupied entries in the input buffer";
    } ififo_fill [10] = 0;

    field {
        desc = "Number of occupied entriesd in the output buffer";
    } ofifo_fill [10] = 0;

    field {
        desc = "When 1, data read from the DDR is no longer valid";
    } data_loss = 0;
};

`DEF_SREG(VFIFO_WPTR)
    desc = "The current DDR Write pointer";
    field { } wr_ptr [32] = 0;
};

`DEF_SREG(VFIFO_AXI_CONFIG)
    desc = "Configuration values of the VFIFO AXI interface";

    field {
        desc = "Address width";
        hw = r;
    } addr_width [16] = 32;

    field {
        desc = "Data width";
        hw = r;
    } data_width [16] = 64;
};

`DEF_CREG(DMA_BUFFER_BASE_ADDR)
    desc = "The base address of the reserved DMA space in DDR";

    field {
        desc = "The DDR base address";
    } ddr_base_addr [32] = 0;
};

`DEF_CREG(DMA_BUFFER_LEN)
    desc = "The maximum number of DMA chunks available in the DDR ring buffer";

    field {
        desc = "Ring buffer length";
    } ring_buffer_len [32] = 0;
};

`DEF_CREG(DMA_BUFFER_ADDR_MASK)
    desc = "The mask is computed from DDR ring buffer specs";

    field {
        desc = "AXI address mask";
    } addr_mask [32] = 0;
};

`DEF_SREG(RING_BUFFER_CONFIG)
    desc = "The static configuration of the DDR ring buffer";

    field {
        desc = "Address width of the DDR controller AXI interface";
    } axi_addr_width [12] = 0;

    field {
        desc = "Data width of the DDR controller AXI interface";
    } axi_data_width [12] = 0;

    field {
        desc = "Number of beats of the AXI transfer toward DDR";
    } drain_burst_len [8] = 0;
};

`DEF_SREG(EOS_IRQ_COUNTER)
    desc = "Number of End-of-Stream interrupts generated so far. This value does not count the
    number of interrupts managed by the Software";

    field {
        desc = "Counter";
    } count [32] = 0;
};

`DEF_SREG(EOB_IRQ_COUNTER)
    desc = "Number of End-of-Burst interrupts generated so far. This value does not count the
    number of interrupts managed by the Software";

    field {
        desc = "Counter";
    } count [32] = 0;
};
