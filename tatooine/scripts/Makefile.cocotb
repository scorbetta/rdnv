.PHONY: purge cov-report

# COCOTB configuration
SIM ?= verilator
TOPLEVEL_LANG ?= verilog
RANDOM_SEED ?= 1697646161
SEED ?= $(RANDOM_SEED)
WAVES ?= 0

# Top-level module determines also test name
MODULE = test_$(shell echo $(TOPLEVEL) | tr 'A-Z' 'a-z')

# Organa configuration flavor
FLAVOR ?= v
DUT_BASE ?= $(shell echo $(TATOOINE_ROOT)/library/syn/$(TOPLEVEL)/rtl/$(FLAVOR)/ | sed 's/\//\\\//g')

# DUT prefix
VERILOG_SOURCES ?= $(shell grep -E "\.[s]*v$$" $(DUT_BASE)/sources.list | sed s'/^/$(DUT_BASE)/g')

# Verilator general options
override EXTRA_ARGS += +1364-2005ext+v +1800-2017ext+sv --autoflush --timing

ifeq ($(WAVES),1)
override EXTRA_ARGS += --trace-fst --trace-structs
endif

# Include COCOTB Makefiles
include $(shell cocotb-config --makefiles)/Makefile.sim

# User-defined clean all
purge: clean
	find . -name __pycache__ -exec rm -fR {} +
	rm -f results.xml
	rm -fR *.vcd *.fst *.cdd cov-report.*

ifeq ($(FLAVOR),sv)
cov-report:
	@echo "Coverage analysis is not supported for SystemVerilog files"
else
# Coverage rule can be called explicitely, just remember to add  WAVES=1  
cov-report:
	$(eval SCORE_OPTS := $(shell echo "$(VERILOG_SOURCES)" | sed 's/[^ ]* */-v &/g'))
	#  covered  does not work with FST
	fst2vcd dump.fst > dump.vcd
	# Score run
	covered score $(SCORE_OPTS) -i $(TOPLEVEL) -t $(TOPLEVEL) -vcd dump.vcd -o $(TOPLEVEL).cdd
	# Report (l)ine, (t)oggle, (c)ombinational and (f)sm metrics
	#@DETAILEDcovered report -d d -m ltcf -o cov-report.details $(TOPLEVEL).cdd
	covered report -d s -m ltcf -o cov-report.summary $(TOPLEVEL).cdd
	# Generate summary for documentation
	grep -w "Accumulated" cov-report.summary | tr '\n' ' ' | grep -Eo "[0-9]+\%" > cov-report.metrics
endif
